import sqlalchemy as sa
import json
import datetime
from data_access.db_classes import DBClassFactory

from sqlalchemy.schema import CreateColumn
from sqlalchemy.ext.compiler import compiles


@compiles(CreateColumn, 'postgresql')
def use_identity(element, compiler, **kw):
    text = compiler.visit_create_column(element, **kw)
    text = text.replace("SERIAL", "INT GENERATED BY DEFAULT AS IDENTITY")
    return text


def populate_database(connection_uri, schema):

    data_store_classes = [(1, "Quantified self")]

    engine = sa.create_engine(connection_uri)
    with engine.connect() as connection:

        meta_data = sa.MetaData(connection, schema=schema)

        meta_data.reflect()

        # data_store_list_dict = [{"id": data_store[0], "name": data_store[1], "created_at": datetime.datetime.utcnow()}
        #                         for data_store in data_store_classes]
        #
        # data_store_obj = DataStoreClass(connection, meta_data)
        # for data_store_dict in data_store_list_dict:
        #     data_store_obj.insert_struct(data_store_dict)


def build_database(connection_uri, schema, drop_all=False):

    engine = sa.create_engine(connection_uri)
    with engine.connect() as connection:

        meta_data = sa.MetaData(connection, schema=schema)
        meta_data.reflect()

        if drop_all:
            meta_data.drop_all()

    with engine.connect() as connection:
        meta_data = sa.MetaData(connection, schema=schema)
        meta_data.reflect()

        meta_data.reflect()

        users = sa.Table("users", meta_data,
                         sa.Column("id", sa.Integer, primary_key=True, autoincrement=True),
                         sa.Column("username", sa.String(128), unique=True),
                         sa.Column("created_at", sa.DateTime, nullable=False))

        groups = sa.Table("groups", meta_data,
                         sa.Column("id", sa.Integer, primary_key=True, autoincrement=True),
                         sa.Column("name", sa.String(128), unique=True),
                         sa.Column("created_at", sa.DateTime, nullable=False))

        user_groups = sa.Table("users_groups", meta_data,
                                           sa.Column("id", sa.Integer, primary_key=True, autoincrement=True),
                                           sa.Column("user_id",  sa.ForeignKey("users.id")),
                                           sa.Column("group_id", sa.ForeignKey("groups.id")),
                                           sa.Column("created_at", sa.DateTime))

        file_types = sa.Table("file_types", meta_data,
                              sa.Column("id", sa.Integer, primary_key=True, autoincrement=True),
                              sa.Column("name", sa.String(64), unique=True))

        files = sa.Table("files", meta_data,
                         sa.Column("id", sa.Integer, primary_key=True, autoincrement=True),
                         sa.Column("file_name", sa.String(512)),
                         sa.Column("md5_hash", sa.String(1024), unique=True),
                         sa.Column("file_type_id", sa.ForeignKey("file_types.id"))
                         )

        user_auth_internal = sa.Table("user_auth_internal", meta_data,
                                      sa.Column("id", sa.Integer, primary_key=True, autoincrement=True),
                                      sa.Column("user_id", sa.ForeignKey("users.id")),
                                      sa.Column("account_email_address", sa.String(256), nullable=False),
                                      sa.Column("account_mobile_phone", sa.String(32)),
                                      sa.Column("reset_code", sa.String(64)),
                                      sa.Column("reset_code_created_at", sa.DateTime),
                                      sa.Column("validation_code", sa.String(64)),
                                      sa.Column("validation_code_created_at", sa.DateTime),
                                      sa.Column("is_account_validated", sa.Boolean),
                                      sa.Column("sha", sa.String(512)),
                                      sa.Column("is_account_locked", sa.Boolean),
                                      sa.Column("created_at", sa.DateTime, nullable=False),
                                      sa.Column("updated_at", sa.DateTime))

        user_internal_auth_login = sa.Table("user_auth_internal_audit", meta_data,
                                            sa.Column("id", sa.Integer, primary_key=True, autoincrement=True),
                                            sa.Column("user_id", sa.ForeignKey("users.id")),
                                            sa.Column("login_success", sa.Boolean),
                                            sa.Column("login_event_date_time", sa.DateTime),
                                            sa.Column("status_message", sa.String(256)))

        meta_data.create_all()


if __name__ == "__main__":
    with open("../../config_dev.json") as f:
        config = json.load(f)

    build_database(config["database_connection_uri"], config["database_schema"])
    populate_database(config["database_connection_uri"], config["database_schema"])